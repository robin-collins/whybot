├── app/
│  ├── src/
│  │  ├── store/
│  │  │  └── appStore.ts [ Manages global application state using Zustand ]
│  │  ├── util/
│  │  │  ├── fileUtils.ts [ Utility functions for file handling (currently empty) ]
│  │  │  ├── json.ts [ Utility functions for JSON manipulation (closing partial JSON, downloading JSON) ]
│  │  │  └── urlUtils.ts [ Utility functions for URL handling (currently empty) ]
│  │  ├── AboutPage.tsx [ Displays information about the creators of the application ]
│  │  ├── AddNodeModal.tsx [ Modal component for adding new nodes (user-question, user-file, user-webpage) ]
│  │  ├── APIKeyModal.tsx [ (Currently Placeholder) Modal for handling API key information (now server-side) ]
│  │  ├── App.tsx [ Main application component, sets up routing and top-level state/logic ]
│  │  ├── CollapsibleSidebar.tsx [ Sidebar component for settings (model, persona) ]
│  │  ├── ConfirmDeleteModal.tsx [ Modal for confirming the deletion of a node branch ]
│  │  ├── constants.ts [ Defines constant values like server URLs ]
│  │  ├── DeletableEdge.css [ CSS styles for the custom deletable edge component ]
│  │  ├── DeletableEdge.tsx [ ReactFlow custom edge component that allows deleting downstream nodes ]
│  │  ├── Dropdown.tsx [ Reusable dropdown component for selecting options (e.g., model, persona) ]
│  │  ├── fadeout-text.css [ CSS styles for text fadeout effect and basic ReactFlow node/edge styling ]
│  │  ├── FadeoutTextNode.tsx [ (Potentially Legacy) ReactFlow node for displaying text with fadeout ]
│  │  ├── firebase.ts [ Initializes Firebase client-side SDK ]
│  │  ├── Flow.tsx [ ReactFlow component responsible for rendering and laying out the graph canvas, includes custom controls and WebSocket logic ]
│  │  ├── FocusedContext.tsx [ React context for managing the currently focused node branch in the graph ]
│  │  ├── global.d.ts [ TypeScript global type declarations, e.g., for window.openai ]
│  │  ├── GraphPage.tsx [ Main page component for displaying and interacting with the Q&A graph ]
│  │  ├── GraphPageExample.css [ CSS specific to the example graph page view ]
│  │  ├── GraphPageExample.tsx [ Component for displaying pre-defined example graphs with simulated streaming ]
│  │  ├── index.css [ Main Tailwind CSS setup and global styles ]
│  │  ├── initialElements.tsx [ (Likely unused/deprecated) Defines initial nodes and edges for ReactFlow ]
│  │  ├── InteractiveNode.css [ CSS styles for the InteractiveNode component ]
│  │  ├── InteractiveNode.tsx [ Universal ReactFlow node component handling rendering and logic for different node types ]
│  │  ├── Loader.tsx [ Simple loading animation component ]
│  │  ├── main.tsx [ Entry point for the React application, sets up React DOM and FingerprintJS ]
│  │  ├── models.ts [ Defines available LLM models and their properties ]
│  │  ├── personas.ts [ Defines available personas, their prompts, and question generation logic ]
│  │  ├── StartPage.tsx [ Initial page where users input the seed query or select examples ]
│  │  ├── types.ts [ Defines shared TypeScript types used across the frontend application ]
│  │  └── vite-env.d.ts [ TypeScript definitions for Vite environment variables ]
│  ├── eslint.config.js
│  ├── index-scripts.html [ Contains external script includes (Analytics, FullStory) ]
│  ├── index.html [ Main HTML entry point for the frontend application ]
│  └── package.json [ Frontend project metadata and dependencies (React app) ]
├── server/
│  ├── routes/
│  │  └── webpage.ts [ Express route handler for the /api/fetch-webpage endpoint ]
│  ├── package.json [ Backend project metadata and dependencies (Node.js server) ]
│  ├── server.ts [ Entry point / main file for the backend API server (Express + WebSocket) ]
└── package.json [ Root project metadata and workspace configuration ]
