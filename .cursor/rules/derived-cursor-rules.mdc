---
description: Cursor rules derived by SpecStory from the project AI interaction history
globs: *
---

## PROJECT OVERVIEW

This project aims to build a knowledge graph exploration tool using a combination of React, Cytoscape.js, and OpenAI's API.  The application allows users to input a question, explore related concepts, and generate a visual graph representation of their knowledge exploration.  The project incorporates various features such as graph persistence, export/import functionalities, and user-friendly interface elements.  Version 1.0.0 of the graph export format is currently implemented.


## CODE STYLE

- Adhere to standard JavaScript/TypeScript coding conventions.
- Maintain consistent indentation (2 spaces).
- Use descriptive variable and function names.
- Follow the Prettier code formatting rules defined in .prettierrc.
- Utilize ESLint for linting and code quality checks, as defined in .eslintrc.json.
- Code should be properly formatted, linted, and successfully built before execution.


## FOLDER ORGANIZATION

The project uses a structured folder organization to enhance maintainability and scalability:

- `/app`: Frontend application code.
    - `/src`: Source code.
        - `/components`: Reusable UI components (e.g., NodeGraph, QuestionNode, DataNode, NodeToolbar, EditableText, UIControls, APIKeyModal).
        - `/pages`: Page-specific components (e.g., AboutPage, HomePage, GraphPage).
        - `/hooks`: Custom React hooks (e.g., useGraphPersistence).
        - `/types`: Type definitions (e.g., GraphTypes, WebSocketTypes).
        - `/services`: Data fetching and interaction logic (e.g., websocket).
        - `/utils`: Utility functions (e.g., graphExport, graphImport).
        - `/models`: Models and their configurations.
        - `/personas`: Personas and their prompts.
    - `/public`: Static assets.
- `/server`: Backend server code.
    - `/examples`: Example data for the application.
    - `/logs`: Directory for storing server logs.


## TECH STACK

- Frontend: React, React Router, TypeScript, Cytoscape.js, react-textarea-autosize, react-markdown, framer-motion, localforage, classnames, remark-gfm
- Backend: Node.js, Express.js, Firebase, OpenAI API, ws
- Testing: (To be defined)


## PROJECT-SPECIFIC STANDARDS

- All new components should follow the established folder structure and naming conventions.
- Error handling should be robust and informative, providing clear messages to the user.
- The application should be designed for scalability and maintainability.
- The WebSocket service should handle reconnections and provide feedback to the user on connection status.
- The graph data should be persisted locally using localStorage for session persistence.
- The graph data should be exportable in JSON, SVG, and PNG formats.


## WORKFLOW & RELEASE RULES

- Follow the standard Gitflow branching model.
- Create detailed commit messages explaining the changes.
- Before pushing code, ensure all tests pass.
- Code reviews are mandatory for all pull requests.
- Release process: (To be defined)


## REFERENCE EXAMPLES

- Example graph data structures are stored in `/server/examples`.
- Reference examples for various components and functionalities can be added here.


## PROJECT DOCUMENTATION & CONTEXT SYSTEM

- Project documentation is maintained using Markdown files.
- The main project plan is located in `PLAN.md`.
- Detailed documentation is maintained for each component and function.
- Version 1.0.0 of the graph export format is currently in use.


## DEBUGGING

- Use the browser's developer tools to debug frontend issues.
- Use verbose logging in the backend server (set LOGGING_LEVEL to "debug") to track requests, responses, and WebSocket connections. The server logs to a file named `server-{DATETIME}.log` in the `server/logs` directory, where DATETIME is the current date and time.
- Implement comprehensive error handling and logging throughout the application.


## FINAL DOs AND DON'Ts

- **DO:** Use descriptive variable names and write clear comments.
- **DO:** Test your changes thoroughly before pushing them to the repository.
- **DO:** Use version control to track changes.
- **DO:** Follow the code style guidelines.
- **DON'T:** Commit broken code.
- **DON'T:** Check in large files.
- **DON'T:** Introduce unnecessary complexity.