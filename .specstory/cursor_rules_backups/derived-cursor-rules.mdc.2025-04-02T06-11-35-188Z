
## PROJECT OVERVIEW

This project aims to build a knowledge graph exploration tool using a combination of React, Cytoscape.js, and OpenAI's API.  The application allows users to input a question, explore related concepts, and generate a visual graph representation of their knowledge exploration.  The project incorporates various features such as graph persistence, export/import functionalities, and user-friendly interface elements.  Version 1.0.0 of the graph export format is currently implemented.


## CODE STYLE

- Adhere to standard JavaScript/TypeScript coding conventions.
- Maintain consistent indentation (2 spaces).
- Use descriptive variable and function names.
- Follow the Prettier code formatting rules defined in .prettierrc.
- Utilize ESLint for linting and code quality checks, as defined in .eslintrc.json.
- Code should be properly formatted, linted, and successfully built before execution.


## FOLDER ORGANIZATION

The project uses a structured folder organization to enhance maintainability and scalability:

- `/app`: Frontend application code.
    - `/src`: Source code.
        - `/components`: Reusable UI components (e.g., NodeGraph, QuestionNode, DataNode, NodeToolbar, EditableText, UIControls, APIKeyModal).
        - `/pages`: Page-specific components (e.g., AboutPage, HomePage, GraphPage).
        - `/hooks`: Custom React hooks (e.g., useGraphPersistence).
        - `/types`: Type definitions (e.g., GraphTypes, WebSocketTypes).
        - `/services`: Data fetching and interaction logic (e.g., websocket).
        - `/utils`: Utility functions (e.g., graphExport, graphImport).
        - `/models`: Models and their configurations.
        - `/personas`: Personas and their prompts.
    - `/public`: Static assets.
- `/server`: Backend server code.
    - `/examples`: Example data for the application.
    - `/logs`: Directory for storing server logs.


## TECH STACK

- Frontend: React, React Router, TypeScript, Cytoscape.js, react-textarea-autosize, react-markdown, framer-motion, localforage, classnames, remark-gfm, @tailwindcss/typography
- Backend: Node.js, Express.js, Firebase, OpenAI API, ws
- Testing: (To be defined)


## PROJECT-SPECIFIC STANDARDS

- All new components should follow the established folder structure and naming conventions.
- Error handling should be robust and informative, providing clear messages to the user.
- The application should be designed for scalability and maintainability.
- The WebSocket service should handle reconnections and provide feedback to the user on connection status.
- The graph data should be persisted locally using localStorage for session persistence.
- The graph data should be exportable in JSON, SVG, and PNG formats.
- **New Node Generation Behavior:** The automatic generation of new question nodes should stop after creating the initial two question nodes. These nodes will contain an "answer" button, which triggers the generation of the answer node only when clicked. This behavior is implemented in `app/src/GraphPage.tsx` and `app/src/FadeoutTextNode.tsx`.  The changes are documented in 2025-04-01_22-43-control-node-graph-behavior.md and 2025-04-02_09-13-modify-graph-node-answer-generation-logic.md.  Key files involved: `app/src/GraphPage.tsx`, `app/src/FadeoutTextNode.tsx`, `app/src/Flow.tsx`, `app/src/personas.ts`.
- **Answer Node Rendering:** Answer nodes now render text using `react-markdown` with `remark-gfm` support for GitHub Flavored Markdown.  Full text display is enabled for answer nodes, removing previous truncation limitations. Answer nodes have a light green border and a 3px thick border. Changes are reflected in `app/src/FadeoutTextNode.tsx` and `app/src/fadeout-text.css`.  These changes were implemented on 2025-04-02 based on user request documented in 2025-04-01_23-25-app-update-markdown-and-node-styling-enhancements.md.  Additional changes include the use of Tailwind's `prose` and `prose-sm` classes for improved Markdown styling.  This requires installing `@tailwindcss/typography` and adding it to your `tailwind.config.js`.
- **Question Node and Button Improvements:** Question nodes are now sized to prevent the "Answer" button from overlapping the question text. The button text changes to "Answering..." and turns green while the answer is being generated.  The button disappears after the answer node is created. Changes are reflected in `app/src/GraphPage.tsx` and `app/src/FadeoutTextNode.tsx`.  These changes were implemented on 2025-04-02 based on user request documented in 2025-04-01_23-42-untitled.md.  Further improvements based on 2025-04-01_23-42-enhancing-question-node-ui-and-button-behavior.md include increased padding to prevent button overlap and a visual indicator (green button, "Answering..." text) while the answer is being generated.  The button is disabled during this process.
- **Answer Node Expansion:** If the answer text exceeds 1500 characters, the node's width animates from its initial size to 150% when expanded. The height adjusts to fit the content.  This addresses issues with Markdown header rendering and improves the display of long answers.  Changes implemented in `app/src/FadeoutTextNode.tsx` and `app/src/fadeout-text.css` on 2025-04-02 based on user request documented in 2025-04-02_00-57-untitled.md.
- **Answer Node Markdown Rendering and Expansion:**  If the answer text exceeds 1500 characters, the node's width animates from its initial size (250px) to 150% (375px) when expanded. The height adjusts to fit the content. Markdown headers now render correctly with appropriate styling.  These changes were implemented in `app/src/FadeoutTextNode.tsx` on 2025-04-02 based on user request documented in 2025-04-02_00-57-enhancing-answer-node-functionality-and-markdown-rendering.md. The `prose-sm` class was removed to allow default `prose` styling for headers.  To address extra padding introduced by prose styles, ensure `@tailwindcss/typography` is installed and configured in `tailwind.config.js`. Add the `[&>*:first-child]:mt-0` class to remove top margin from the first child within the prose container in `app/src/FadeoutTextNode.tsx`.  Answer nodes should have a 3px thick border (`border-[3px]`). List markers should be styled with `prose-li:marker:text-black` and `prose-li:my-1` for improved styling. The `leading-tight` class should be used to set the line-height to 1.25em.  Additional styling `[&_ul>li:first-child]:mt-[0.25em] [&_ol>li:first-child]:mt-[0.25em]` was added to reduce top margin on the first list item of unordered and ordered lists. The addition of `[&_ul]:mt-[0.25em] [&_ol]:mt-[0.25em]` further reduced the spacing around nested lists.
- **TailwindCSS Typography Plugin:** Ensure `@tailwindcss/typography` is installed and configured in `tailwind.config.js` for proper Markdown styling and header rendering.  The `prose` class should be used for markdown rendering.  Additional styling may be required to remove excess padding.  The `[&>*:first-child]:mt-0` class can be applied to the inner `div` containing the `ReactMarkdown` component to remove top margin from the first child.  Answer nodes should have a 3px thick border (`border-[3px]`).  List markers (ordered and unordered list bullets and numbers) should be styled with `prose-li:marker:text-black` to ensure they are black.  To reduce excessive spacing around list items, use `prose-li:my-1`.  The `leading-tight` class should be used to set the line-height to 1.25em.  Additional styling `[&_ul]:mt-[0.25em] [&_ol]:mt-[0.25em]` was added to reduce top margin on nested lists.  The `[&_p]:mt-[1em] [&_p]:mb-0` classes should be used to reduce vertical spacing around paragraphs.
- **Answer Node Expansion and Child Node Positioning:** When an answer node expands due to long content, the layout algorithm should recalculate the positions of newly generated child question nodes using the expanded dimensions of the parent answer node.  This requires modification to the node placement logic within `app/src/GraphPage.tsx`.  Further investigation and debugging are needed to ensure correct placement after expansion.  This issue was identified on 2025-04-02 and documented in 2025-04-02_02-07-untitled.md.  The issue has been identified and resolved by updating the `layoutElements` function in `app/src/Flow.tsx` to use the actual width and height from the `dagre` layout engine instead of hardcoded values for offset calculations. This ensures the layout correctly reflects the expanded dimensions of the answer node. The fix is documented in 2025-04-02_02-07-node-layout-issue-with-answer-expansion.md.  Further debugging revealed that the issue persisted due to timing of state updates.  Logging was added to `layoutElements` in `app/src/Flow.tsx` to confirm that the correct dimensions were being used.  The issue remains unresolved and requires further investigation.  The problem is likely due to the timing of state updates in `FadeoutTextNode.tsx`.  The `setNodeDims` function should be called reliably whenever the node's actual size changes, not just on click. This requires modification to `FadeoutTextNode.tsx` to ensure `setNodeDims` is called within the `useEffect` hook that watches `bounds.height`, and that it accounts for the component possibly not being expanded yet when dimensions are first measured.  The final fix involved moving the `setNodeDims` call into the `useEffect` hook that watches `bounds.height` in `FadeoutTextNode.tsx` to ensure dimensions are updated reliably whenever they change.  The logic was adjusted to handle cases where the node isn't expanded yet when dimensions are first measured.  A linter error was also fixed by correctly ordering variable declarations. A small delay was added to `generateAnswerForNode` in `app/src/GraphPage.tsx` to allow time for dimension updates to propagate before adding child nodes.  This delay is implemented using `setTimeout` with a 50ms delay.
- **Answer Node Scrolling:** If the answer text exceeds a certain height after expansion, a vertical scrollbar should appear within the node to allow scrolling of the content. The maximum expanded height should be limited to 99% of the browser viewport height.
- **List Item Spacing:** To reduce excessive spacing around list items, use `prose-li:my-1`.  Additional styling `[&_ul]:mt-[0.25em] [&_ol]:mt-[0.25em]` was added to reduce top margin on nested lists.
- **Layout Optimization:** To improve the layout performance and address issues with nodes not being rendered initially, the layout function in `Flow.tsx` now filters nodes to include only those with available dimensions or the initial question nodes. This ensures that the layout only processes nodes with complete information. A small delay was added to `generateAnswerForNode` in `app/src/GraphPage.tsx` using `setTimeout` with a 50ms delay to allow time for dimension updates to propagate before adding child nodes. This helps prevent race conditions where the layout is performed before the dimensions are updated.


## WORKFLOW & RELEASE RULES

- Follow the standard Gitflow branching model.
- Create detailed commit messages explaining the changes.
- Before pushing code, ensure all tests pass.
- Code reviews are mandatory for all pull requests.
- Release process: (To be defined)


## REFERENCE EXAMPLES

- Example graph data structures are stored in `/server/examples`.
- Reference examples for various components and functionalities can be added here.


## PROJECT DOCUMENTATION & CONTEXT SYSTEM

- Project documentation is maintained using Markdown files.
- The main project plan is located in `PLAN.md`.
- Detailed documentation is maintained for each component and function.
- Version 1.0.0 of the graph export format is currently in use.


## DEBUGGING

- Use the browser's developer tools to debug frontend issues.
- Use verbose logging in the backend server (set LOGGING_LEVEL to "debug") to track requests, responses, and WebSocket connections. The server logs to a file named `server-{DATETIME}.log` in the `server/logs` directory, where DATETIME is the current date and time.
- Implement comprehensive error handling and logging throughout the application.
- Add logging statements to the `layoutElements` function in `app/src/Flow.tsx` to debug node positioning issues.  Specifically, log the dimensions received from `nodeDims` and the dimensions used by `dagre` for answer nodes.  Further debugging revealed the need for additional logging within `layoutElements` to track the dimensions received from `nodeDims` and those used by `dagre`.  This logging will help identify if the issue is with the data passed to `layoutElements` or with `dagre` itself.


## FINAL DOs AND DON'Ts

- **DO:** Use descriptive variable names and write clear comments.
- **DO:** Test your changes thoroughly before pushing them to the repository.
- **DO:** Use version control to track changes.
- **DO:** Follow the code style guidelines.
- **DON'T:** Commit broken code.
- **DON'T:** Check in large files.
- **DON'T:** Introduce unnecessary complexity.