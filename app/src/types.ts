/**
 * @fileoverview Defines shared TypeScript types for the Q&A tree application.
 */

/**
 * Represents the different types of nodes available in the Q&A tree.
 * - 'llm-question': A question generated by the LLM.
 * - 'llm-answer': An answer generated by the LLM.
 * - 'user-question': A question node manually entered or edited by the user.
 * - 'user-file': A node containing content extracted from a user-uploaded file.
 * - 'user-webpage': A node containing content extracted from a user-provided URL.
 */
export type NodeType =
  | "llm-question"
  | "llm-answer"
  | "user-question"
  | "user-file"
  | "user-webpage";

/**
 * Represents metadata for a file uploaded by the user.
 */
export interface UserFileInfo {
  name: string; // Original filename
  type: string; // MIME type
  size: number; // Size in bytes
}

/**
 * @interface QATreeNode
 * @description Represents a node within the Q&A tree data structure.
 */
export interface QATreeNode {
  nodeID: string; // Unique identifier for this node (e.g., 'q-0', 'uf-123')
  nodeType: NodeType; // The type of the node
  question: string; // Primary text: question, title, or summary
  answer: string; // Secondary text: answer, file content, webpage content
  parent?: string; // ID of the parent node
  children?: string[]; // IDs of child nodes
  startedProcessing?: boolean; // Flag for LLM processing state (answers/questions)

  // --- Fields specific to user-interactive nodes ---
  fileInfo?: UserFileInfo; // Metadata for 'user-file' type
  url?: string; // URL for 'user-webpage' type
  isLoading?: boolean; // UI flag for loading states (file upload, URL fetch)
  errorMessage?: string; // Stores errors related to node processing
  screenshot?: string; // Base64 PNG screenshot for 'user-webpage' type
}

/**
 * Represents the entire Q&A tree as a dictionary.
 * Keys are node IDs (strings), values are QATreeNode objects.
 */
export interface QATree {
  [key: string]: QATreeNode;
}

/**
 * Represents the dimensions (width and height) of nodes for layout purposes.
 * Keys are node IDs (e.g., 'q-0', 'a-0', 'uf-123'), values are dimension objects.
 */
export type NodeDims = {
  [key: string]: {
    width: number;
    height: number;
  };
};

/**
 * Represents a scored question generated by the LLM.
 */
export interface ScoredQuestion {
  question: string;
  score: number;
}

// Add other shared types if needed
